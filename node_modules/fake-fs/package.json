{
  "name": "fake-fs",
  "version": "0.2.1",
  "description": "Fake file system for testing",
  "scripts": {
    "test": "mocha -R spec"
  },
  "repository": {
    "type": "git",
    "url": "git://github.com/eldargab/node-fake-fs.git"
  },
  "keywords": [
    "fs",
    "fake",
    "mocks",
    "test"
  ],
  "devDependecies": {
    "mocha": "1.4.2",
    "should": "*"
  },
  "author": {
    "name": "Eldar Gabdullin",
    "email": "eldargab@gmail.com"
  },
  "license": "MIT",
  "readme": "# fake-fs\n\nFake node.js file system for testing. Supports `stat`, `exists`, `readdir`,\n`readFile`, `writeFile`, `mkdir`, `rmdir`, `unlink`, `rename` and their sync counterparts.\n\n## Usage\n\n``` javascript\nvar Fs = require('fake-fs')\nvar fs = new Fs\n```\n\nDefine a dir\n\n``` javascript\nfs.dir('a/b/c')\nfs.existsSync('a/b/c').should.be.true\nfs.existsSync('a').should.be.true // note that it works like mkdir -p\nfs.existsSync('.').should.be.true // in fact you defined an item at absolute path\nfs.existsSync(process.cwd()).should.be.true\n```\n\nDir with some meta\n\n``` javascript\nfs.dir('bin', {\n  mtime: 100, // by default it will be set to (new Date)\n  atime: 300,\n  ctime: 50\n})\nfs.statSync('bin').should.have.property('mtime').equal(100)\n```\n\nDefine an empty file\n\n``` javascript\nfs.file('foo/bar.txt')\nfs.readFileSync('foo/bar.txt', 'utf8').should.equal('')\nfs.statSync('foo').isDirectory().should.be.true // foo automatically created\n```\n\nDefine a file with content\n\n``` javascript\nfs.file('hello.txt', 'Hello world') // utf8 assumed\nfs.file('base64.txt', 'TWFu', 'base64')\nfs.file('bin', new Buffer([10, 20]))\n```\n\nDefine a file with arbitrary attributes\n\n``` javascript\nfs.file('file', {\n  content: 'asdf',\n  mtime: new Date,\n  hello: 'hello'\n})\n\nfs.readFileSync('file', 'utf8').should.equal('asdf')\nfs.statSync('file').should.have.property('hello').equal('hello')\n```\n\nSometimes you may want to define several items at one location. The `.at(path)`\nreturns a proxy which prefixes everything you defined with `path`.\n\n``` javascript\nfs.at('public/assets')\n  .file('style.css')\n  .file('icons.png')\nfs.existsSync('public/assets/icons.png').should.be.true\n```\n\nIt also has convenience methods for patching-unpatching of global `fs` object.\n\n``` javascript\nfs.patch()\nfs.dir('foo')\nrequire('fs').existsSync('foo').should.be.true\nfs.unpatch()\nrequire('fs').existsSync('foo').should.be.false\n```\n\n## Supported features\n\n```\n.stat()\n  ✓ Should return stats\n  ✓ Should throw ENOENT on non-existent path\n  ✓ Should support absolute paths\n.readdir()\n  ✓ Should list a dir contents\n  ✓ Should throw ENOENT on non-existent path\n  ✓ Should throw ENOTDIR on non-dir\n.exists()\n  ✓ Should return true on existent path\n  ✓ Should return false for non-existent path\n.mkdir()\n  ✓ Should create dir\n  ✓ Should ignore mode\n  ✓ Should throw EEXIST on existing item\n  ✓ Should throw ENOENT on non-existent parent\n  ✓ Should throw ENOTDIR on non-dir parent\n  ✓ Should update parent times\n.readFile()\n  ✓ Should read file contents\n  ✓ Should decode file contents\n  ✓ Should throw ENOENT on non-existent file\n  ✓ Should throw EISDIR on directory\n.writeFile()\n  ✓ Should write file\n  ✓ Should respect encoding\n  ✓ Should allow to write buffers\n  ✓ Should throw ENOTDIR when parent is not a dir\n  ✓ Should throw ENOENT whent parent dir does not exist\n  ✓ Should update dir times on file creation\n  ✓ Should not update dir times on file update\n```\n\n## Notes\n\nIf you decide to use this library please depend on strict versions.\n\n## Installation\n\nVia npm\n\n```\nnpm install fake-fs\n```\n\nTo run tests install dev dependencies and run `npm test` command.\n\n```\nnpm install -d\nnpm test\n```\n\n## License\n\n(The MIT License)\n\nCopyright (c) 2012 Eldar Gabdullin <eldargab@gmail.com>\n\nPermission is hereby granted, free of charge, to any person obtaining\na copy of this software and associated documentation files (the\n'Software'), to deal in the Software without restriction, including\nwithout limitation the rights to use, copy, modify, merge, publish,\ndistribute, sublicense, and/or sell copies of the Software, and to\npermit persons to whom the Software is furnished to do so, subject to\nthe following conditions:\n\nThe above copyright notice and this permission notice shall be\nincluded in all copies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED 'AS IS', WITHOUT WARRANTY OF ANY KIND,\nEXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF\nMERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.\nIN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY\nCLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT,\nTORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE\nSOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.\n",
  "readmeFilename": "README.md",
  "bugs": {
    "url": "https://github.com/eldargab/node-fake-fs/issues"
  },
  "homepage": "https://github.com/eldargab/node-fake-fs",
  "_id": "fake-fs@0.2.1",
  "_from": "fake-fs@~0.2.1"
}
